#include <iostream>
#include <string>
#include <queue>
#include <stack>
using namespace std;

struct Node
{
    char item;
    Node* left;
    Node* right;
    Node(char key){
        item = key;
        left = nullptr;
        right = nullptr;
    }
};

struct binTree
{
    Node* root = nullptr;

    int searchParent(int inL, int inR, string in, string level);
    queue<char> createQueue(int inL, int inR, string in, string level);
    Node* buildTree(int inL, int inR, string in, string level);
    void printPre(Node* p);
    void delTree(Node* p);
};

int binTree :: searchParent(int inL, int inR, string in, string level)
{
    // find the next parent in inOrder
    queue<char> q;
    q = createQueue(inL, inR, in, level);
    for(int i=inL; i<=inR; i++){
        if(in[i] == q.front()){
            return i;
        }
    }
    return -1;
}

queue<char> binTree :: createQueue(int inL, int inR, string in, string level)
{
    // find the next subTree
    queue<char> queue;
    for(char ch : level){
        for(int i=inL; i<=inR; i++){
            if(ch == in[i]){
                queue.push(ch);
            }
        }
    }
    return queue;
}

Node* binTree :: buildTree(int inL, int inR, string in, string level)
{
    if(inL > inR) return nullptr;

    int index = searchParent(inL, inR, in, level);
    Node* node = new Node(in[index]);

    node->left = buildTree(inL, index-1, in, level);
    node->right = buildTree(index+1, inR, in, level);

    return node;
}

void binTree :: printPre(Node *p)
{
    stack<Node*> s;
    while(p != nullptr || !s.empty()){
        while(p != nullptr){
            cout << p->item << ' ';
            s.push(p);
            p = p->left;
        }
        p = s.top();
        s.pop();
        p = p->right;
    }
}

void binTree ::delTree(Node *p)
{
    stack<Node*> s;
    while(p != nullptr || !s.empty()){
        while(p != nullptr){
            s.push(p);
            p = p->left;
        }
        Node* cur = s.top();
        s.pop();
        p = cur->right;
        delete cur;
    }
}

int main()
{
    string inOrder = "DBEAFC";
    string levelOrder = "ABCDEF";

    binTree tree;
    tree.root = tree.buildTree(0, 5, inOrder, levelOrder);
    tree.printPre(tree.root);
    tree.delTree(tree.root);

    return 0;
}

//          A
//        /   \
//       B     C
//      / \   /
//     D   E F
